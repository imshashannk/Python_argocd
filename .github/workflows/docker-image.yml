name: Docker Image Update, Scan, and Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  update-image:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Get the latest version tag from Docker Hub and increment
      - name: Get Latest Version Tag and Increment
        id: version
        run: |
          IMAGE_NAME="imshashannk/hello-world"
          
          # Fetch tags from Docker Hub
          echo "Fetching tags for image: $IMAGE_NAME"
          TAGS=$(curl -s "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/" | jq -r '.results[].name')
          echo "Available tags: $TAGS"
          
          # Extract the latest semver tag
          LATEST_TAG=$(echo "$TAGS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "Latest tag found: $LATEST_TAG"
          
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
            PATCH=$((PATCH + 1))
            NEW_TAG="$MAJOR.$MINOR.$PATCH"
          fi

          echo "New version tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t imshashannk/hello-world:${{ env.NEW_TAG }} .

      # Step 6: Cache Trivy Vulnerability Database
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      # Step 7: Run Trivy Vulnerability Scan
      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'imshashannk/hello-world:${{ env.NEW_TAG }}'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: 'table'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        continue-on-error: true  # Allows workflow to proceed if vulnerabilities are found

      # Step 8: Check Vulnerability Scan Result
      - name: Check Vulnerability Scan Result
        if: failure()
        run: |
          echo "Vulnerabilities found in the image scan."
          exit 1

      # Step 9: Push Docker Image to Docker Hub if no vulnerabilities are found
      - name: Push Docker Image
        if: success()
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: imshashannk/hello-world:${{ env.NEW_TAG }}

      # Step 10: Update Deployment YAML with the new image tag
      - name: Update Deployment YAML
        run: |
          echo "Before update:"
          cat manifests/deployment.yaml

          # Update the image tag in deployment.yaml to the new version
          sed -i 's|image: imshashannk/hello-world:.*|image: imshashannk/hello-world:${{ env.NEW_TAG }}|' manifests/deployment.yaml

          echo "After update:"
          cat manifests/deployment.yaml

          # Step 11: Set Git user name and email for committing
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Step 12: Check if there are any changes in the deployment.yaml
          if git diff --quiet manifests/deployment.yaml; then
            echo "No changes to commit"
          else
            # Step 13: Commit and push the updated deployment.yaml
            git add manifests/deployment.yaml
            git commit -m "Update Docker image to latest version: ${{ env.NEW_TAG }}"
            git push origin main
          fi
