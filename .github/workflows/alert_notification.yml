name: Docker Image Vulnerability Alerts

on:
  push:
    branches:
      - main

jobs:
  trivy-scan-and-alert:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Get Latest Version Tag and Increment
      - name: Get Latest Version Tag and Increment
        id: version
        run: |
          IMAGE_NAME="imshashannk/hello-world"
          TAGS=$(curl -s "https://hub.docker.com/v2/repositories/$IMAGE_NAME/tags/" | jq -r '.results[].name')
          LATEST_TAG=$(echo "$TAGS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
            PATCH=$((PATCH + 1))
            NEW_TAG="$MAJOR.$MINOR.$PATCH"
          fi
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t imshashannk/hello-world:${{ env.NEW_TAG }} .
          docker push imshashannk/hello-world:${{ env.NEW_TAG }}

      # Step 6: Cache Trivy DB
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      # Step 7: Set up Trivy
      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
        with:
          version: 'latest'

      # Step 8: Scan Docker Image with Trivy
      - name: Trivy Vulnerability Scan
        id: trivy-scan
        run: |
          trivy image imshashannk/hello-world:${{ env.NEW_TAG }} \
            --severity CRITICAL,HIGH --format json -o trivy-output.json || echo "Scan failed" > trivy-error.log
        continue-on-error: true

      # Step 9: Check for Trivy Errors and Send Slack Alerts
      - name: Send Slack Notification for Vulnerabilities
        if: always()  # Ensure this step runs even if the previous step fails
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if grep -q "Scan failed" trivy-error.log; then
            curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"⚠️ Trivy scan failed for image: imshashannk/hello-world:${{ env.NEW_TAG }}. Please check the logs.\"}" \
            "$SLACK_WEBHOOK_URL"
          elif jq '.[] | select(.Severity == "CRITICAL" or .Severity == "HIGH")' trivy-output.json | jq length > 0; then
            curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"⚠️ Vulnerabilities detected in image: imshashannk/hello-world:${{ env.NEW_TAG }}. Please review the results.\"}" \
            "$SLACK_WEBHOOK_URL"
          else
            curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"✅ No critical or high vulnerabilities detected in image: imshashannk/hello-world:${{ env.NEW_TAG }}.\"}" \
            "$SLACK_WEBHOOK_URL"
          fi
