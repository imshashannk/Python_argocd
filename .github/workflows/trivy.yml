name: Trivy Vulnerability Scan

on:
  push:
    branches:
      - main

jobs:
  trivy_scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout the code
        uses: actions/checkout@v2

      # Step 2: Cache the Trivy DB to avoid repeated downloads and bypass rate limiting
      - name: Cache Trivy DB
        uses: actions/cache@v2
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      # Step 3: Log in to Docker Hub to pull the private image if required
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Install Trivy and perform the security scan
      - name: Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/my-organization/my-app:${{ github.sha }}"
          format: "template"
          template: "@/contrib/sarif.tpl"
          severity: "CRITICAL,HIGH"
          vuln-type: "os,library"
          output: "trivy-results.sarif"
        env:
          TRIVY_CACHE_DIR: /tmp/trivy-cache  # Cache directory for Trivy

      # Step 5: Upload the SARIF report for code scanning alerts on GitHub
      - name: Upload SARIF Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

      # Step 6: Send Slack Notification if vulnerabilities are found
      - name: Send Slack Notification on Vulnerability Alert
        if: failure()  # Only send notification if vulnerabilities are found
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"⚠️ Security vulnerabilities detected in $GITHUB_REPOSITORY. Please review the Trivy scan results.\"}" \
          "$SLACK_WEBHOOK_URL"

      # Step 7: Send Slack Notification on Successful Push (no vulnerabilities found)
      - name: Send Slack Notification on Successful Push
        if: success()  # Send notification on successful push
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"✅ Code pushed successfully to $GITHUB_REPOSITORY on the main branch. No critical or high vulnerabilities detected.\"}" \
          "$SLACK_WEBHOOK_URL"
